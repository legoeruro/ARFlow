// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: protos/arflow_grpc/service.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace ARFlow {
  /// <summary>
  /// The ARFlow service definition.
  /// </summary>
  public static partial class ARFlowService
  {
    static readonly string __ServiceName = "arflow.v1.ARFlowService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ARFlow.RegisterClientRequest> __Marshaller_arflow_v1_RegisterClientRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ARFlow.RegisterClientRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ARFlow.RegisterClientResponse> __Marshaller_arflow_v1_RegisterClientResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ARFlow.RegisterClientResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ARFlow.ProcessFrameRequest> __Marshaller_arflow_v1_ProcessFrameRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ARFlow.ProcessFrameRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ARFlow.ProcessFrameResponse> __Marshaller_arflow_v1_ProcessFrameResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ARFlow.ProcessFrameResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::ARFlow.RegisterClientRequest, global::ARFlow.RegisterClientResponse> __Method_RegisterClient = new grpc::Method<global::ARFlow.RegisterClientRequest, global::ARFlow.RegisterClientResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RegisterClient",
        __Marshaller_arflow_v1_RegisterClientRequest,
        __Marshaller_arflow_v1_RegisterClientResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::ARFlow.ProcessFrameRequest, global::ARFlow.ProcessFrameResponse> __Method_ProcessFrame = new grpc::Method<global::ARFlow.ProcessFrameRequest, global::ARFlow.ProcessFrameResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ProcessFrame",
        __Marshaller_arflow_v1_ProcessFrameRequest,
        __Marshaller_arflow_v1_ProcessFrameResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::ARFlow.ServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ARFlowService</summary>
    [grpc::BindServiceMethod(typeof(ARFlowService), "BindService")]
    public abstract partial class ARFlowServiceBase
    {
      /// <summary>
      /// Registers a client with the given specifications.
      ///
      /// The client is registered with the server and is assigned a unique identifier.
      /// The client can then send data frames to the server using the assigned identifier.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::ARFlow.RegisterClientResponse> RegisterClient(global::ARFlow.RegisterClientRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Accepts a data frame from a client, returning an acknowledgment.
      ///
      /// Errors:
      /// - NOT_FOUND: If the client configuration is not found.
      /// - INVALID_ARGUMENT: If the color data type is not recognized or the depth data type 
      /// is not recognized or if the request's data cannot be decoded (e.g., corrupted or invalid data).
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::ARFlow.ProcessFrameResponse> ProcessFrame(global::ARFlow.ProcessFrameRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ARFlowService</summary>
    public partial class ARFlowServiceClient : grpc::ClientBase<ARFlowServiceClient>
    {
      /// <summary>Creates a new client for ARFlowService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ARFlowServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ARFlowService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ARFlowServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ARFlowServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ARFlowServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Registers a client with the given specifications.
      ///
      /// The client is registered with the server and is assigned a unique identifier.
      /// The client can then send data frames to the server using the assigned identifier.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ARFlow.RegisterClientResponse RegisterClient(global::ARFlow.RegisterClientRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterClient(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Registers a client with the given specifications.
      ///
      /// The client is registered with the server and is assigned a unique identifier.
      /// The client can then send data frames to the server using the assigned identifier.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ARFlow.RegisterClientResponse RegisterClient(global::ARFlow.RegisterClientRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RegisterClient, null, options, request);
      }
      /// <summary>
      /// Registers a client with the given specifications.
      ///
      /// The client is registered with the server and is assigned a unique identifier.
      /// The client can then send data frames to the server using the assigned identifier.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ARFlow.RegisterClientResponse> RegisterClientAsync(global::ARFlow.RegisterClientRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterClientAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Registers a client with the given specifications.
      ///
      /// The client is registered with the server and is assigned a unique identifier.
      /// The client can then send data frames to the server using the assigned identifier.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ARFlow.RegisterClientResponse> RegisterClientAsync(global::ARFlow.RegisterClientRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RegisterClient, null, options, request);
      }
      /// <summary>
      /// Accepts a data frame from a client, returning an acknowledgment.
      ///
      /// Errors:
      /// - NOT_FOUND: If the client configuration is not found.
      /// - INVALID_ARGUMENT: If the color data type is not recognized or the depth data type 
      /// is not recognized or if the request's data cannot be decoded (e.g., corrupted or invalid data).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ARFlow.ProcessFrameResponse ProcessFrame(global::ARFlow.ProcessFrameRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ProcessFrame(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Accepts a data frame from a client, returning an acknowledgment.
      ///
      /// Errors:
      /// - NOT_FOUND: If the client configuration is not found.
      /// - INVALID_ARGUMENT: If the color data type is not recognized or the depth data type 
      /// is not recognized or if the request's data cannot be decoded (e.g., corrupted or invalid data).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ARFlow.ProcessFrameResponse ProcessFrame(global::ARFlow.ProcessFrameRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ProcessFrame, null, options, request);
      }
      /// <summary>
      /// Accepts a data frame from a client, returning an acknowledgment.
      ///
      /// Errors:
      /// - NOT_FOUND: If the client configuration is not found.
      /// - INVALID_ARGUMENT: If the color data type is not recognized or the depth data type 
      /// is not recognized or if the request's data cannot be decoded (e.g., corrupted or invalid data).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ARFlow.ProcessFrameResponse> ProcessFrameAsync(global::ARFlow.ProcessFrameRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ProcessFrameAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Accepts a data frame from a client, returning an acknowledgment.
      ///
      /// Errors:
      /// - NOT_FOUND: If the client configuration is not found.
      /// - INVALID_ARGUMENT: If the color data type is not recognized or the depth data type 
      /// is not recognized or if the request's data cannot be decoded (e.g., corrupted or invalid data).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ARFlow.ProcessFrameResponse> ProcessFrameAsync(global::ARFlow.ProcessFrameRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ProcessFrame, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override ARFlowServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ARFlowServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(ARFlowServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_RegisterClient, serviceImpl.RegisterClient)
          .AddMethod(__Method_ProcessFrame, serviceImpl.ProcessFrame).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ARFlowServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_RegisterClient, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ARFlow.RegisterClientRequest, global::ARFlow.RegisterClientResponse>(serviceImpl.RegisterClient));
      serviceBinder.AddMethod(__Method_ProcessFrame, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ARFlow.ProcessFrameRequest, global::ARFlow.ProcessFrameResponse>(serviceImpl.ProcessFrame));
    }

  }
}
#endregion
