using System;
using Cysharp.Net.Http;
using Grpc.Net.Client;
using UnityEngine;

using static ARFlow.OtherUtils;

namespace ARFlow
{
    /// <summary>
    /// This class represent the implementation for the client, using the gRPC protocol generated by Protobuf.
    /// The client of ARFlow allows registering to the server and sending data frames to the server.
    /// </summary>
    public class ARFlowClient
    {
        private readonly GrpcChannel _channel;
        private readonly ARFlowService.ARFlowServiceClient _client;
        private string _sessionId;

        /// <summary>
        /// Initialize the client
        /// </summary>
        /// <param name="address">The address (AKA server URL) to connect to</param>
        public ARFlowClient(string address)
        {
            PrintDebug("Initialize client for " + address);
            var handler = new YetAnotherHttpHandler() { Http2Only = true };
            _channel = GrpcChannel.ForAddress(address, new GrpcChannelOptions()
            {
                HttpHandler = handler,
                MaxReceiveMessageSize = null
            });
            _client = new ARFlowService.ARFlowServiceClient(_channel);
        }

        ~ARFlowClient()
        {
            _channel.Dispose();
        }

        /// <summary>
        /// Connect to the server with a request that contain register data of about the camera.
        /// This will throw an error if the connection is not established.
        /// </summary>
        /// <param name="requestData">Register data (AKA metadata) of the camera. The typing of this is generated by Protobuf.</param>
        public void Connect(RegisterClientRequest requestData)
        {
            var response = _client.RegisterClient(requestData);
            _sessionId = response.Uid;

            PrintDebug(response.Uid);
        }

        /// <summary>
        /// Send a data of a frame to the server.
        /// </summary>
        /// <param name="frameData">Data of the frame. The typing of this is generated by Protobuf.</param>
        public string SendFrame(ProcessFrameRequest frameData)
        {
            string res = "";
            frameData.Uid = _sessionId;
            try
            {
                // _client.data_frameAsync(frameData)
                // .ResponseAsync.ContinueWith(response =>
                // {
                //     PrintDebug(response);
                // });
                var response = _client.ProcessFrame(frameData);
                res = response.Message;
            }
            catch (Exception e)
            {
                // Try to catch any exceptions.
                // Network, device image, camera intrinsics
                PrintDebug(e.Message);
            }

            return res;
        }
    }
}
