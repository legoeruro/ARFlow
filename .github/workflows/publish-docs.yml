name: Publish docs

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  workflow_call:

permissions:
  pages: write
  id-token: write

jobs:
  build-client-docs-as-artifact:
    name: Build client docs
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install docfx
        run: dotnet tool install -g docfx

      - name: Run script to build the documentation
        working-directory: ./unity/Documentation
        run: ./scripts/build.cmd

      # - name: Move docs to website directory
      #   run: |
      #     mkdir -p ./website/docs/client/
      #     cp -r ./unity/Documentation/clientHTMLOutput/* ./website/docs/client/
      # Upload the website directory as an artifact
      - uses: actions/upload-artifact@v4
        with:
          name: client-docs
          path: ./unity/Documentation/clientHTMLOutput

  build-server-docs:
    name: Build server docs
    needs: build-client-docs-as-artifact
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Python
        id: install_python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install Poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: "1.8.3"

      - name: Setup a local virtual environment (if no poetry.toml file)
        working-directory: ./python
        run: |
          poetry config virtualenvs.create true --local
          poetry config virtualenvs.in-project true --local

      - name: Restore cached virtualenv
        uses: actions/cache/restore@v4
        with:
          path: ./python/.venv
          key: venv-${{ runner.os }}-${{ steps.install_python.outputs.python-version }}-${{ hashFiles('./python/poetry.lock') }}

      - name: Install docs dependencies
        working-directory: ./python
        run: |
          poetry install --with docs
          echo "$(poetry env info --path)/bin" >> $GITHUB_PATH
          echo "VIRTUAL_ENV=$(poetry env info --path)/bin" >> $GITHUB_ENV

      # - name: Saved cached virtualenv
      #   uses: actions/cache/save@v4
      #   with:
      #     path: ./python/.venv
      #     key: venv-${{ runner.os }}-${{ steps.install_python.outputs.python-version }}-${{ hashFiles('./python/poetry.lock') }}

      - name: Build the documentation
        working-directory: ./python
        run: python tools/make_docs_cli.py

      - name: Move docs to website directory
        run: |
          mkdir -p ./website/docs/server/
          cp -r ./python/docs/* ./website/docs/server/

      # Get client docs to use as part of pages artifact
      - uses: actions/download-artifact@v4
        with:
          name: client-docs
          path: ./website/docs/client

      # # cleanup client docs artifacts
      # - name: Delete client docs artifact
      #   run: |
      #     github.rest.actions.deleteArtifact({
      #       owner: context.repo.owner,
      #       repo: context.repo.repo,
      #       artifact_id: ${{ steps.artifact-download.outputs.artifact-id }}
      #     });

      - uses: actions/upload-pages-artifact@v3
        with:
          path: ./website

  # Single deploy job since we're just deploying
  deploy-website:
    name: Deploy website
    needs: build-server-docs
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
